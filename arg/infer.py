import argparse
import time
import librosa
from pathlib import Path
from .model import BaseModel, RGGRU, RGGRUAT, RGTransformer, RGRoFormer
from .utils import generate_tja


def infer(model: BaseModel, music: Path) -> str:
    audio, _ = librosa.load(music, sr=16000)

    start = time.time()
    output = model.predict(audio)
    end = time.time()
    print(f"Time taken: {end - start:.2f}s")

    tja = generate_tja(
        output, title=music.stem, subtitle=f"Generated by {model_name}", wave=music.name
    )
    return tja


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("type", type=str, help="Model type")
    parser.add_argument("model", type=str, help="Model name")
    parser.add_argument("music", type=str, help="Music file")
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()

    type = args.type.lower()
    model_name = args.model
    music = Path(args.music)

    if type == "rggru":
        model = RGGRU.from_pretrained(model_name)
    elif type == "rggruat":
        model = RGGRUAT.from_pretrained(model_name)
    elif type == "rgtr":
        model = RGTransformer.from_pretrained(model_name)
    elif type == "rgroformer":
        model = RGRoFormer()
    else:
        raise ValueError(f"Invalid model type: {type}")
    model.eval()

    tja = infer(model, music)

    file = music.parent / f"output-{model_name.replace('/', '-')}.tja"
    with open(file, "w") as f:
        f.write(tja)
    print(f"Output saved to {file}")
